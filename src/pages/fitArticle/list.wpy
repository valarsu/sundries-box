<style lang="less">
  .container {
    background: #f85415;
  }
  .title {
    padding: 32rpx;
    color: #fff;
    font-size: 32rpx;
    text-align: center;
  }
  .mylist {
    width: 100%;
    height: 100rpx;
    line-height: 100rpx;
    background: #f0f1f5;
    border-bottom: 2rpx solid #fff;
    box-sizing: border-box;
    font-size: 28rpx;
    color: #f85415;
    padding: 0 32rpx;
    display: flex;
    justify-content: space-between;
  }
</style>
<template>
  <view class="container">
    <view class="title">
      包子的文章
    </view>
    <!-- 列表 -->
    <block wx:for-items="{{list}}" wx:for-index="index" wx:for-item="item" wx:key="id">
      <view @tap="toDetail('{{item.id}}')" class="mylist">
        <view>{{item.index + 1}}: 第{{item.index + 1}}章</view>
        <i class="iconfont icon-right"></i>
      </view>
    </block>
  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class ArticleList extends wepy.page {

    config = {
      navigationBarTitleText: '文章列表'
    }
    data = {
      normalTitle: '原始标题',
      list: [],
      currentPage: 1,
      total: 0
    }

    computed = {
    }

    methods = {
      toDetail (id) {
        let atcId = id
        wx.navigateTo({url: `detail?atcId=${atcId}`})
      }
    }

    getList(type) {
      let WX = wx
      let self = this
      let articles = self.$parent.globalData.testDB.collection('articles')
      articles.count().then(res => {
        self.total = res.total
        self.$apply()
      })
      const _ = self.$parent.globalData.testDB.command

      let start = (self.currentPage - 1) * 20
      let end = self.currentPage * 20 - 1


      wx.showLoading({
        title: '加载中',
      })
      articles
        .where({
          index: _.gte(start).and(_.lte(end))
        })
        .orderBy('index', 'asc')
        .get({
          success (res) {
            wx.hideLoading()
            let newList = []
            if (type && type === 'pullDown') {
              self.list = []
            }
            newList = res.data.map(item => {
              return {
                id: item._id,
                index: item.index
              }
            })
            if (type && type === 'reachBottom') {
              // 如果是触底操作，先过滤老数据，再push新数据
              newList.forEach(newItem => {
                self.list = self.list.filter((item => {
                  return item.id != newItem.id
                }))
              })
              console.log(self.list)
            }
            self.list.push(...newList)
            wx.stopPullDownRefresh()
            self.$apply()
          },
          fail (err) {
            wx.hideLoading()
            console.log(err)
          }
        })
    }
    events = {
    }

    onLoad() {
      this.getList()
    }

    onPullDownRefresh() {
      this.currentPage = 1
      this.getList('pullDown')
    }
    onReachBottom() {
      if (this.currentPage < Math.ceil(this.total / 20)) {
        this.currentPage ++
      } else {
        this.currentPage = Math.ceil(this.total / 20)
      }
      console.log(this.currentPage)
      this.getList('reachBottom')
    }
  }
</script>
